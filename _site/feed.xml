<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.0">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2021-07-10T23:21:12+02:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">A life that made sense</title><subtitle>My family and I took a road less traveled. This blog will be a journal concerning our new life in France. I hope to share some fun engineering projects also along the way.</subtitle><author><name>Mike Hinkle</name></author><entry><title type="html">RPI3b+ (Headless) running PostgreSQL instance on localhost for longer term data retention (Part 1)</title><link href="http://localhost:4000/rpi/headless/postgresql/2021/07/10/rpi_headless_postgres.html" rel="alternate" type="text/html" title="RPI3b+ (Headless) running PostgreSQL instance on localhost for longer term data retention (Part 1)" /><published>2021-07-10T17:00:00+02:00</published><updated>2021-07-10T17:00:00+02:00</updated><id>http://localhost:4000/rpi/headless/postgresql/2021/07/10/rpi_headless_postgres</id><content type="html" xml:base="http://localhost:4000/rpi/headless/postgresql/2021/07/10/rpi_headless_postgres.html">&lt;h2 id=&quot;motivation&quot;&gt;Motivation&lt;/h2&gt;

&lt;p&gt;I have been collecting my daughter’s pulse oximeter data for almost two years. She is
24-hour ventilator dependent and my wife and I have had some close calls where she has stopped 
breathing. Initially, the only way we could see her sats was to be physically in front of the 
pulse oximeter. Obviously, this is not a realistic option. Over the last few years, I have
attemped different solutions to not only monitor her, but also to model her breathing and
various health metrics. Some of those solutions were:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;php scripts through apache on a local server&lt;/li&gt;
  &lt;li&gt;InfluxDB also on a local server and plugged into Grafana for visualization&lt;/li&gt;
  &lt;li&gt;InfluxDB Cloud, which enabled us to monitor her remotely&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I still use number 3 above to this very day:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/mobile_web_grafana.jpg&quot; alt=&quot;drawing&quot; style=&quot;max-width: 100%; height: auto; text-align: center;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Full disclosure, I am cheap and use the hobbyist free account for both InfluxDB and Grafana which understandably 
comes with some limitations. One of those limitations is a 30-day data retention policy for InfluxDB. 30-days is 
great for real time monitoring, but what if I want to model seasonal patterns year-on-year? This is
the spirit of this project. I want to capture as much historical data as possible without spending
any money. I already have a spare raspberry pi 3b+ and I have an internet connection, what more do I need?&lt;/p&gt;

&lt;p&gt;Covered in this write-up today will be:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Downloading Raspberry Pi OS and flashing the OS to a microSD&lt;/li&gt;
  &lt;li&gt;Activating SSH and the WIFI connection to run headless&lt;/li&gt;
  &lt;li&gt;Remotely logging into pi to bring the system up-to-date&lt;/li&gt;
  &lt;li&gt;Downloading and configuring postgreSQL&lt;/li&gt;
  &lt;li&gt;Testing that configuration&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Part 2 of this series will actually extract the data I have in my InfluxDB Cloud instance using the Flux query language, 
shape the data and push the desired data to the postgreSQL instance I will be creating today. So, let us begin…&lt;/p&gt;

&lt;h3 id=&quot;downloading-raspberry-pi-os-and-flashing-the-os-to-a-microsd-card&quot;&gt;Downloading raspberry pi OS and flashing the OS to a microSD card&lt;/h3&gt;

&lt;p&gt;I have been using raspberry pi’s for years and I cannot emphasize enough, how great they are for the price. Once ordering
a board which typically costs me ~35$ US, I need to download an OS and flash that OS to a microSD card.
Since I am looking to do this quickly, I am not installing anything cute like Arch or Gentoo. Raspberry Pi OS it is. The images can be
downloaded here: &lt;a href=&quot;https://www.raspberrypi.org/software/operating-systems/&quot;&gt;OS Download&lt;/a&gt;. You will find multiple versions,
in my case since I am configuring this single board computer to run headless, I do not need a GUI or any additional
software (like LibreOffice, etc..) so I selected Raspberry Pi OS Lite.&lt;/p&gt;

&lt;p&gt;Once the OS is downloaded, I change into the directory where the download was saved (in my case ~/Downloads/) and I unzip the 
image using the following command: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$ unzip 2021-05-07-raspios-buster-armhf-lite.zip&lt;/code&gt; which will uncompress a single
image. In  my case, the image was named &lt;strong&gt;2021-05-07-raspios-buster-armhf-lite.img&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;At this stage, for the past few years, I have used balenaEtcher to flash images to microSDs: &lt;a href=&quot;https://www.balena.io/etcher/&quot;&gt;Balena Download&lt;/a&gt;,
I have never had any issues and the software works wonderfully. Today however, I wanted to try out a USB flashed I have resident
on my OS which comes installed on POP!_OS named &lt;strong&gt;Popsicle&lt;/strong&gt;.:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/popsicle_screenshot.png&quot; alt=&quot;drawing&quot; style=&quot;max-width: 100%; height: auto; text-align: center;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once the image was selected and pointed at my microSD card, I can proceed to burn the image. If I was hooking the raspberry pi
up to a monitor and keyboard after the image was burned, I could go ahead and install the microSD card into my raspberry pi
and skip the next section below. But, since I do not have an extra monitor and want to run headless, I will be adding a
few extra files to the microSD card before I remove the microSD card from my workstation.&lt;/p&gt;

&lt;h3 id=&quot;activating-ssh-and-wifi-connection-to-run-headless&quot;&gt;Activating SSH and WIFI connection to run headless&lt;/h3&gt;

&lt;p&gt;To avoid needing a monitor and a keyboard for my rpi and to make the single board computer available online to access
via SSH, I need to add 2 files to the root of /boot on the newly installed image. On my workstation, once the microSD is
mounted to my filesystem, I can change directory into /boot (the microSD card is mounted for me at /media/run/),
and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;touch ssh&lt;/code&gt;, this will create an empty file named &lt;strong&gt;ssh&lt;/strong&gt; which enables ssh. The second file I need to create will be named &lt;strong&gt;wpa_supplicant.conf&lt;/strong&gt; and it should be located
in the same directory, I just created the empty ssh file. The contents of this file are:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;country=FR
ctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev
update_config=1

network={
    ssid=&quot;NAME-OF-YOUR-WIFI-NETWORK&quot;
    psk=&quot;PASSWORD-FOR-YOUR-WIFI&quot;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I can save and close the above file and I am done. The microSD card can be unmounted, ejected and installed
into my raspberry pi. Once the raspberry pi is plugged into a 5V power supply, and I am within range
of my wifi, I should be able to ssh in using my workstation.&lt;/p&gt;

&lt;h3 id=&quot;remotely-logging-into-pi-to-bring-the-system-up-to-date&quot;&gt;Remotely logging into pi to bring the system up-to-date&lt;/h3&gt;

&lt;p&gt;Once my pi is plugged in and out of the way, I can use &lt;strong&gt;nmap&lt;/strong&gt; from my workstation to find out
which ip address my rpi was assigned. But, first I need my inet ip address:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ ifconfig

wlp5s0: flags=4163&amp;lt;UP,BROADCAST,RUNNING,MULTICAST&amp;gt;  mtu 1500
    inet 192.168.0.28  netmask 255.255.255.0  broadcast 192.168.0.255
    inet6 2a01:e0a:897:1680:4e48:5fa5:da96:558c  prefixlen 64  scopeid 0x0&amp;lt;global&amp;gt;
    inet6 2a01:e0a:897:1680:19f8:90c1:6834:f9e6  prefixlen 64  scopeid 0x0&amp;lt;global&amp;gt;
    inet6 fe80::3e7d:52b9:f37d:b024  prefixlen 64  scopeid 0x20&amp;lt;link&amp;gt;
    ether 74:d8:3e:01:6d:14  txqueuelen 1000  (Ethernet)
    RX packets 66847  bytes 50766070 (50.7 MB)
    RX errors 0  dropped 36  overruns 0  frame 0
    TX packets 46905  bytes 9180586 (9.1 MB)
    TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The relevant ip address above is &lt;strong&gt;192.168.0.28&lt;/strong&gt;. Armed with this, I can now use
nmap to determine my rpi’s address:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo nmap -sn 192.168.0.28/24

Starting Nmap 7.80 ( https://nmap.org ) at 2021-07-10 14:58 CEST
Nmap scan report for 192.168.0.12 
Host is up (0.25s latency).
MAC Address: B8:27:EB:E0:08:FB (Raspberry Pi Foundation)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So, I can access my rpi remotely via ssh using the ip address &lt;strong&gt;192.168.0.12&lt;/strong&gt;. 
Please note that the default password for raspberry’s is &lt;em&gt;raspberry&lt;/em&gt; so enter that
when prompted:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ ssh pi@192.168.0.12

pi@192.168.0.12's password: 
Linux influxdb-historic 5.10.17-v7+ #1421 SMP Thu May 27 13:59:01 BST 2021 armv7l

The programs included with the Debian GNU/Linux system are free software;
the exact distribution terms for each program are described in the
individual files in /usr/share/doc/*/copyright.

Debian GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extent
permitted by applicable law.
Last login: Sat Jul 10 12:27:06 2021 from 192.168.0.28
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Please note that I have logged in already prior to this so your output my be slightly different.
The first thing I did was to change the password from raspberry to a password of my choice. To
do this, type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;passwd&lt;/code&gt; and then type enter. You could also type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;passwd pi&lt;/code&gt; and then enter. 
Follow the prompts to update the password.&lt;/p&gt;

&lt;p&gt;After this is complete, I like to change the keyboard and language settings using
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sudo raspi-config&lt;/code&gt;. Once all the settings are to my liking, I save and restart the pi:
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sudo reboot&lt;/code&gt;. That will kick me off ssh and terminate my connection. After a minute or
so, I can re-connect via &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ssh pi@192.168.0.12&lt;/code&gt;, enter my new password and once logged in,
continue to update my packages from the repo with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sudo apt update &amp;amp;&amp;amp; sudo apt upgrade&lt;/code&gt;.
That’s it, for this section, next step will be downloading and configuring the postgresql
server.&lt;/p&gt;

&lt;h3 id=&quot;downloading-and-configuring-the-postgresql-database-server&quot;&gt;Downloading and configuring the PostgreSQL Database Server&lt;/h3&gt;

&lt;p&gt;If you are un-familiar with databases, PostgreSQL is considered a RDBMS or
&lt;strong&gt;R&lt;/strong&gt;elational &lt;strong&gt;D&lt;/strong&gt;atabase &lt;strong&gt;M&lt;/strong&gt;anagement &lt;strong&gt;S&lt;/strong&gt;ystem and is in a nutshell, an excellent place to store 
relational data. In a corporate setting I was more familiar with Oracle, but PostgreSQL is essentially 
the same thing for zero cost (which I would argue makes it better than Oracle :stuck_out_tongue_winking_eye:).
Anyway, moving on… Let’s install it:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ apt search postgresql

postgresql/stable,now 11+200+deb10u4 all
  object-relational SQL database (supported version)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The above command is used to search through the default system repos. There will be many items returned,
but the package I would like to install is the supported version seen above.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo apt install postgresql
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;After this is complete, you can check to see if the database server is running:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ systemctl status postgresql

● postgresql.service - PostgreSQL RDBMS
   Loaded: loaded (/lib/systemd/system/postgresql.service; enabled; vendor preset: enabled)
   Active: active (exited) since Sat 2021-07-10 12:50:01 CEST; 2h 57min ago
  Process: 7771 ExecStart=/bin/true (code=exited, status=0/SUCCESS)
 Main PID: 7771 (code=exited, status=0/SUCCESS)

Jul 10 12:50:01 influxdb-historic systemd[1]: Starting PostgreSQL RDBMS...
Jul 10 12:50:01 influxdb-historic systemd[1]: Started PostgreSQL RDBMS.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If I didn’t see this above, I would need to start the service myself. Also, if I would like
the postgres database to start at boot, then I would need to enable it (assuming systemd):&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo systemctl start postgresql
$ sudo systemctl enable postgresql
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So, now postgreSQL is installed and running in the background. I can login into the database
but need to switch to the postgres user first:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo su - postgres
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now to connect through CLI using the postgresql-client:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;postgres@influxdb-historic:~$ psql
psql (11.12 (Raspbian 11.12-0+deb10u1))
Type &quot;help&quot; for help.

postgres=#
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And it was a success. I typically create a new user at this point with a password. This
user I am creating will be the owner of my historical data database.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;postgres=# CREATE USER soitgoes511 WITH PASSWORD '&amp;lt;YOUR_PASSWORD_HERE&amp;gt;';
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Finally, I want to create my database and change the ownership to the new user I created:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;postgres=# CREATE DATABASE pulse_oximeter_historic;
postgres=# ALTER DATABASE pulse_oximeter_historic OWNER TO soitgoes511;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I can see my new database owned by yours truly:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;postgres=# \l
                                          List of databases
          Name           |    Owner    | Encoding |   Collate   |    Ctype    |   Access privileges   
-------------------------+-------------+----------+-------------+-------------+-----------------------
 postgres                | postgres    | UTF8     | en_US.UTF-8 | en_US.UTF-8 | 
 pulse_oximeter_historic | soitgoes511 | UTF8     | en_US.UTF-8 | en_US.UTF-8 | 
 template0               | postgres    | UTF8     | en_US.UTF-8 | en_US.UTF-8 | =c/postgres          +
                         |             |          |             |             | postgres=CTc/postgres
 template1               | postgres    | UTF8     | en_US.UTF-8 | en_US.UTF-8 | =c/postgres          +
                         |             |          |             |             | postgres=CTc/postgres
(4 rows)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;test-database-by-writing-to-it-remotely&quot;&gt;Test database by writing to it remotely&lt;/h3&gt;

&lt;p&gt;Before testing, I need to make a a few changes to some of the postgreSQL configuration files. The loader I will
be writing to populate this database with historical data will most likely run locally (on the pi), but I will be testing
from my workstation. Therefore, I need to give authorization for my ip address to connect to the db and I
need to the database to listen for more than the localhost. I will also be accessing the database to query data for modeling
eventually and will need to ensure that I can access it:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo vim /etc/postgresql/11/main/postgresql.conf
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;First, I uncomment and change this line under &lt;em&gt;connections and authentication&lt;/em&gt;:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;listen_addresses = '*'                  # what IP address(es) to listen on;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Save and close. Then I can open up &lt;strong&gt;pg_hba.conf&lt;/strong&gt; and give permissions to my workstation to connect:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo vim /etc/postgresql/11/main/pg_hba.conf

host    all             all             192.168.0.28/32         trust
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Once this line is appended, I can restart my postgresql server and attempt to write some data to it:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo systemctl restart postgresql
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;From my workstation, I am using a &lt;strong&gt;jupyter-notebook&lt;/strong&gt; and python 3 to first test the remote connection and
then to load a dummy dataset I downloaded as a csv file off &lt;strong&gt;Kaggle&lt;/strong&gt;. Here is a screenshot of those scripts
and the output:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;psycopg2&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;psycopg2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;connect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;host&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;192.168.0.12&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;database&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;pulse_oximeter_historic&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;soitgoes511&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&amp;lt;YOUR_PSQL_PASSWORD&amp;gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# create a cursor
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cur&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cursor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# execute a statement
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;PostgreSQL database version:&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;cur&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;SELECT version()&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# display the PostgreSQL database server version
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;db_version&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cur&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fetchone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;db_version&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# close the communication with the PostgreSQL
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cur&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The connection was successful. OUTPUT:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;PostgreSQL database version:
('PostgreSQL 11.12 (Raspbian 11.12-0+deb10u1) on arm-unknown-linux-gnueabihf, compiled by gcc (Raspbian 8.3.0-6+rpi1) 8.3.0, 32-bit',)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Let me attempt to write some data to the db:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sqlalchemy&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;create_engine&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pandas&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pd&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;engine&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;create_engine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;postgresql://soitgoes511:&amp;lt;YOUR_PSQL_PASSWORD&amp;gt;@192.168.0.12:5432/pulse_oximeter_historic&quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;df_best_sellers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read_csv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/home/soitgoes/Kaggle/bestsellers_with_categories.csv&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;df_best_sellers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to_sql&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;bestsellers&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;engine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;if_exists&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;replace&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;engine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dispose&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Finally, to sanity check the data made it there, let me query it:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sqlalchemy&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;create_engine&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pandas&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pd&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;engine&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;create_engine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;postgresql://soitgoes511:&amp;lt;YOUR_PSQL_PASSWORD&amp;gt;@192.168.0.12:5432/pulse_oximeter_historic&quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;query&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot;SELECT * FROM bestsellers LIMIT 5;&quot;&quot;&quot;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;df&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read_sql&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;engine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;engine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dispose&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/dummy_table.png&quot; alt=&quot;drawing&quot; style=&quot;max-width: 100%; height: auto; text-align: center;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It worked :sparkles:. That is a wrap for today. Part II as I mentioned will delve into actually extracting the relevant
data, transforming/shaping it and then loading it into my new postgres instance hosted on my very cheap and
wonderful rpi3b+. Thank you for reading.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“I think, at a child’s birth, if a mother could ask a fairy godmother to endow it with the most useful gift, that gift would be curiosity.”
― Eleanor Roosevelt&lt;/p&gt;
&lt;/blockquote&gt;</content><author><name>Mike Hinkle</name></author><category term="rpi" /><category term="headless" /><category term="postgresql" /><summary type="html">Motivation</summary></entry><entry><title type="html">Broken virtual environments: Why it happened and how I should have prevented it</title><link href="http://localhost:4000/linux/update/python/venv/broken/prevention/2021/07/06/fixing_broken_venv.html" rel="alternate" type="text/html" title="Broken virtual environments: Why it happened and how I should have prevented it" /><published>2021-07-06T17:00:00+02:00</published><updated>2021-07-06T17:00:00+02:00</updated><id>http://localhost:4000/linux/update/python/venv/broken/prevention/2021/07/06/fixing_broken_venv</id><content type="html" xml:base="http://localhost:4000/linux/update/python/venv/broken/prevention/2021/07/06/fixing_broken_venv.html">&lt;p&gt;Approximately 3-4 days ago, I updated my Linux box (&lt;strong&gt;Pop!_OS&lt;/strong&gt; version 20.10 -&amp;gt; 21.04). 
I have run Linux long enough to know that there could be unintended issues during
these major version updates. My first defense against possible headaches is to wait for
a few days and hope others find the bugs, report them and everything gets ironed out quickly.
Years ago I was not as cautious :see_no_evil:, but I no longer have the luxury of time to bang my head
into a desk for days and slog through issues or re-compile kernels. I just play it safe now.&lt;/p&gt;

&lt;p&gt;The good news is that despite a drastic change to the Pop!_OS desktop environment
(from &lt;strong&gt;GNOME 3.38.4&lt;/strong&gt; to &lt;strong&gt;COSMIC&lt;/strong&gt;), the update and upgrade went very smoothly. The new DE
is an improvement on GNOME, my system is very responsive, the stars all aligned and
everything is perfect. Kudos to the system76 team :thumbsup:. But.. Not everything
was perfect…&lt;/p&gt;

&lt;h3 id=&quot;what-exactly-was-the-problem&quot;&gt;What exactly was the problem?&lt;/h3&gt;

&lt;p&gt;Let me begin by saying that my issue has nothing to do with my updated OS. I decided
yesterday that I wanted to update a Heroku application which lives in a local repository
on my now updated workstation. This application was written in Python and the interpreter executed within a 
virtual environment (venv). Virtual environments should be self contained, correct? 
Sounds safe right :skull:? What happened was that the OS upgrade replaced my pre-existing system python (3.8) with
a newer python version (3.9). Had I sourced a standalone python install when creating the
virtual environment, or had the OS just switched PYTHON_TARGETS, then I would not be
writing this right now. I had created the venv like so for this particular Heroku application:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;soitgoes@pop-os:~$ python3 -m venv venv&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The above command created said virtual environment inside a directory called venv with a symbolic link
pointing from the venv interpreter to my system python interpreter @ /usr/bin/python3.8 which no longer existed :disappointed::&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lrwxrwxrwx 1 soitgoes soitgoes    6 Jun 17 21:38 python3.8 -&amp;gt; python&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;At my previous work, I had many python versions installed on a dev mount to avoid this very issue.&lt;/p&gt;

&lt;h3 id=&quot;how-to-fix-the-issue-and-my-steps-moving-forward-&quot;&gt;How to fix the issue and my steps moving forward …&lt;/h3&gt;

&lt;p&gt;Install a standalone development python which lives seperately and isolated from my system python. This
would avoid the pain I am enduring now when my system is updated again with a new python install. 
I have no excuse for dropping the ball like this but it is what it is. Lesson learned.
Steps to remedy the situation, starting with that isolated python install:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Download desired python version &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$ wget https://www.python.org/ftp/python/3.8.11/Python-3&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Uncompress the python version   &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$ tar -xzvf Python-3.8.11.tgz&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Change into directory           &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$ cd Python-3.8.11/&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Configure with target location  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$ ./configure --prefix=/home/soitgoes/python-3.8.11&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Compile and build               &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$ make&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Test build                      &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$ make test&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Install python to target location  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$ make altinstall&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I can see that the above steps were successful by executing the newly installed
interpreter which was specified in my target location above (/home/soitgoes/python-3.8.11)
:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;soitgoes@pop-os:~$ ~/python-3.8.11/bin/python3.8&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;And voilà… The REPL (&lt;strong&gt;R&lt;/strong&gt;ead, &lt;strong&gt;E&lt;/strong&gt;valuate, &lt;strong&gt;P&lt;/strong&gt;rint, &lt;strong&gt;L&lt;/strong&gt;oop) prompt appears reflecting
my desired version:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Python 3.8.11 (default, Jul  6 2021, 22:44:39)
[GCC 10.3.0] on linux
Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.
&amp;gt;&amp;gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;My system python has been unchanged and I can verify this very easily:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;soitgoes@pop-os:~$ which python3
/usr/bin/python3
soitgoes@pop-os:~$ python3
Python 3.9.5 (default, May 11 2021, 08:20:37)
[GCC 10.3.0] on linux
Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.
&amp;gt;&amp;gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Please notice the versioning differences. The next step in this process will be to
rebuild the symbolic links in the affected virtual environment. Please make note that
the python3 symlink points to the system /usr/bin/python3 (which is the issue since it
is now python 3.9 rather than 3.8). The other symlinks just chain all the python 
aliases together: python -&amp;gt; python3 which I just mentioned points to the system python
install. Finally, the last link is python3.9 -&amp;gt; python3 again:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;lrwxrwxrwx 1 soitgoes soitgoes    7 Jul  4 22:58 python -&amp;gt; python3
lrwxrwxrwx 1 soitgoes soitgoes   16 Jul  4 22:58 python3 -&amp;gt; /usr/bin/python3
lrwxrwxrwx 1 soitgoes soitgoes    7 Jul  4 22:58 python3.9 -&amp;gt; python3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;These soft links need to be re-directed to my newly built and installed python which
is now located in my home directory. I can do this simply by changing into the affected
venv/bin/ directory where the symlinks are present and then:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$ ln -sf /home/soitgoes/python-3.8.11/bin/python3.8 python3&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The symlinks are now corrected. When activating the previously affected venv, and
running the python interpreter I am greeted with version 3.8.11 rather than 3.9.5.
My application will again run without the need of rebuilding all of my dependencies.
Since this is fixed and it is getting late, I will need to actually do what I set out
to do initially (update my Heroku app) later. Enough problems solved for one day.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The moral of the story is to ensure you seperate your system dependencies from your
development dependencies. No sense in muddying the waters and causing unnecessary
headaches.&lt;/strong&gt; :heavy_check_mark:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The mind is not a vessel to be filled, but a fire to be kindled.
&lt;em&gt;― Plutarch&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;</content><author><name>Mike Hinkle</name></author><category term="linux" /><category term="update" /><category term="python" /><category term="venv" /><category term="broken" /><category term="prevention" /><summary type="html">Approximately 3-4 days ago, I updated my Linux box (Pop!_OS version 20.10 -&amp;gt; 21.04). I have run Linux long enough to know that there could be unintended issues during these major version updates. My first defense against possible headaches is to wait for a few days and hope others find the bugs, report them and everything gets ironed out quickly. Years ago I was not as cautious :see_no_evil:, but I no longer have the luxury of time to bang my head into a desk for days and slog through issues or re-compile kernels. I just play it safe now.</summary></entry><entry><title type="html">Initial observations while settling in</title><link href="http://localhost:4000/france/blog/careers/ee/2021/06/26/initial_observations.html" rel="alternate" type="text/html" title="Initial observations while settling in" /><published>2021-06-26T17:00:00+02:00</published><updated>2021-06-26T17:00:00+02:00</updated><id>http://localhost:4000/france/blog/careers/ee/2021/06/26/initial_observations</id><content type="html" xml:base="http://localhost:4000/france/blog/careers/ee/2021/06/26/initial_observations.html">&lt;p&gt;I have begun applying for jobs. Perhaps I am being un-realistic considering
I am a beginner in the French language. I could not imagine finding a job in
the states and not speaking English. :crossed_fingers:&lt;/p&gt;

&lt;h3 id=&quot;some-observations-&quot;&gt;Some observations …&lt;/h3&gt;

&lt;p&gt;My first observation is that most positions in the fields I am looking for are
looking for Master’s or PHd’s. I guess when university doesn’t cost $100k for
an undergraduate degree :moneybag:, there is more motivation to go a step further. I find myself
regretting not sticking it out for my Master’s but that ship has sailed. At least
I have experience in industry.&lt;/p&gt;

&lt;p&gt;My second observation is that Electrical Engineering degrees here do not translate
to the same studies in the US. I could be wrong and I will have a better perspective
on this very shortly. I have noticed quite a bit of variation in EE degrees in the US, 
too. I have friends which never studied transistors at their schools. We were drowned in
small signal models, large signal models, BJT’s, MOSFET’s, etc.. After long
discussions with my wife in the past, my understanding is that the French University
system is, for the most part, standardized.&lt;/p&gt;

&lt;p&gt;Due to the second observation above :point_up:, there will probably be some
ambiguity for potential employers. I am attempting to find a career in big data,
data science, data engineering, analytics, web development, etc.. Not sure if that
aligns even remotely with what their EE’s learn at University, but it is not a huge
leap from my past curriculum and studies. Only time will tell. It has only been
2 weeks since I set foot on French soil and I need to be patient and keep plugging away.
On the bright side, in the meantime, I can spend time with my family. I never would 
have had this much time with my children had we stayed in the US.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Per aspera ad astra&lt;/p&gt;
&lt;/blockquote&gt;</content><author><name>Mike Hinkle</name></author><category term="france" /><category term="blog" /><category term="careers" /><category term="EE" /><summary type="html">I have begun applying for jobs. Perhaps I am being un-realistic considering I am a beginner in the French language. I could not imagine finding a job in the states and not speaking English. :crossed_fingers:</summary></entry><entry><title type="html">A new start in France</title><link href="http://localhost:4000/first/france/blog/careers/family/2021/06/21/new_start_in_france.html" rel="alternate" type="text/html" title="A new start in France" /><published>2021-06-21T16:01:00+02:00</published><updated>2021-06-21T16:01:00+02:00</updated><id>http://localhost:4000/first/france/blog/careers/family/2021/06/21/new_start_in_france</id><content type="html" xml:base="http://localhost:4000/first/france/blog/careers/family/2021/06/21/new_start_in_france.html">&lt;p&gt;I will keep this short and sweet. I left corporate life in &lt;strong&gt;America&lt;/strong&gt; to move to my wife’s home country, &lt;strong&gt;France&lt;/strong&gt;. I had worked in the &lt;em&gt;semiconductor industry&lt;/em&gt; for about 4 years as 
an &lt;em&gt;engineer&lt;/em&gt; in various roles. My background at University was &lt;strong&gt;Electrical Engineering&lt;/strong&gt; with a concentration in microelectronics. My employer treated me well and finances were good. 
I had a real career. About 3.5 years ago my beautiful daughter was born. My wife and I were informed at our 20 week sonogram that there were issues. Our life has never been the same 
since.&lt;/p&gt;

&lt;p&gt;I have been through plenty of hard times in my life, but to this day, seeing her struggles has really darkened my soul. We came to France so her and my son could be with family. We
came to France so they could be loved. We are only here on this earth for a brief moment and like &lt;em&gt;Bob Marley&lt;/em&gt; said so wonderfully:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“…life is worth much more than gold.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This is my first blog entry. I promise that I will delve into some fun projects down the road. I am waiting until we purchase our house to nerd out on some &lt;strong&gt;IOT and pub-sub messaging
systems&lt;/strong&gt;. If you read this, thank you. :grin:&lt;/p&gt;

&lt;div style=&quot;display: inline-block;&quot;&gt;
  &lt;img src=&quot;/assets/baby_girl_1.jpeg&quot; alt=&quot;drawing&quot; style=&quot;height: 300px;&quot; /&gt;
&lt;/div&gt;
&lt;div style=&quot;display: inline-block;&quot;&gt;
  &lt;img src=&quot;/assets/french_town_1.jpg&quot; alt=&quot;drawing&quot; style=&quot;height: 300px;&quot; /&gt;
&lt;/div&gt;
&lt;div style=&quot;display: inline-block;&quot;&gt;
  &lt;img src=&quot;/assets/baby_boy_1.jpeg&quot; alt=&quot;drawing&quot; style=&quot;height: 300px;&quot; /&gt;
&lt;/div&gt;</content><author><name>Mike Hinkle</name></author><category term="first" /><category term="france" /><category term="blog" /><category term="careers" /><category term="family" /><summary type="html">I will keep this short and sweet. I left corporate life in America to move to my wife’s home country, France. I had worked in the semiconductor industry for about 4 years as an engineer in various roles. My background at University was Electrical Engineering with a concentration in microelectronics. My employer treated me well and finances were good. I had a real career. About 3.5 years ago my beautiful daughter was born. My wife and I were informed at our 20 week sonogram that there were issues. Our life has never been the same since.</summary></entry></feed>